<!-- project build configuration -->
<project name="ooo-gardens" basedir="../.." xmlns:artifact="urn:maven-artifact-ant">
  <property name="deploy.dir" value="dist"/>
  <property name="app.name"   value="gardens"/>
  <property name="webapps"    value="gardens"/>

  <!-- bring in our standard build support -->
  <ant antfile="etc/ooo/bootstrap.xml"/>
  <import file="${user.home}/.m2/ant-support/1.2/build-support.xml"/>

  <!-- define various packaging properties -->
  <property name="gardens.user"     value="_gardens"/>
  <property name="maintainer.name"  value="Three Rings Design"/>
  <property name="maintainer.email" value="gardens@threerings.net"/>
  <tstamp><format property="pkgVersion" pattern="yyyyMMddHHmmss"/></tstamp>

  <!-- gets our various properties files and sticks them in dist -->
  <target name="config" depends="-init-ooo">
    <mkdir dir="${deploy.dir}"/>

    <!-- grab the deployment et al properties from the configuration location -->
    <gatherconfiguration app="${app.name}" distribution="${ooo.distribution}" dest="${deploy.dir}">
      <sources refid="ooo.oooconfig.source"/>
      <sources><directory path="${basedir}/etc"/></sources>
      <files>
        <file name="toybox.properties"/>
        <file name="gardens.conf"/>
        <file name="build_settings.properties"/>
      </files>
    </gatherconfiguration>

    <!-- Read in all the deployment & build configuration bits. -->
    <property file="${deploy.dir}/build_settings.properties"/>
  </target>

  <!-- prepare the application -->
  <target name="prepare" depends="config">
    <!-- copy our logging properties -->
    <copy todir="${deploy.dir}" file="${basedir}/etc/log4j.properties"/>

    <!-- download our dependencies via Maven -->
    <artifact:dependencies filesetId="dependency.fileset">
      <remoteRepository refid="ooo.maven.depends.repo"/>
      <dependency groupId="com.threerings" artifactId="threerings" version="1.0"/>
      <dependency groupId="com.threerings" artifactId="toybox" version="1.1-SNAPSHOT"/>
      <dependency groupId="javax.mail" artifactId="mail" version="1.4.1"/>
      <dependency groupId="mysql" artifactId="mysql-connector-java" version="5.1.6"/>
      <dependency groupId="org.slf4j" artifactId="slf4j-api" version="1.6.1"/>
      <dependency groupId="org.slf4j" artifactId="slf4j-log4j12" version="1.6.1"/>
    </artifact:dependencies>
    <copy todir="${deploy.dir}/lib">
      <fileset refid="dependency.fileset"/>
      <flattenmapper/>
    </copy>
  </target>

  <!-- creates our OOO authenticator jar -->
  <target name="ooo-auth" depends="prepare">
    <mkdir dir="${deploy.dir}/classes"/>
    <javac srcdir="src/main/java" destdir="${deploy.dir}/classes" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" deprecation="on" source="1.5" target="1.5">
      <classpath><fileset dir="${deploy.dir}/lib" includes="*.jar"/></classpath>
      <compilerarg value="-Xlint"/>
      <compilerarg value="-Xlint:-serial"/>
    </javac>
    <jar destfile="${deploy.dir}/lib/ooo-toybox-auth.jar" basedir="${deploy.dir}/classes"/>
  </target>

  <!-- creates the Proguarded Java client -->
  <target name="client" depends="prepare">
    <ant dir="projects/client" target="all" inheritAll="false"/>
  </target>

  <!-- build the server -->
  <target name="dist" depends="prepare,ooo-auth">
    <!-- copy our jar files into a directory where the games can build against them -->
    <copy todir="projects/games/lib">
      <fileset dir="${deploy.dir}/lib" includes="**/*.jar"/>
    </copy>
  </target>

  <!-- build the games and gg-client zip and tar files -->
  <target name="gamesdist" depends="client">
    <zip destfile="pages/howto/game-gardens.zip" basedir="projects" includes="games/**"/>
    <tar destfile="pages/howto/game-gardens.tar.gz" basedir="projects" includes="games/**"
         compression="gzip"/>
  </target>

  <!-- fully cleans out the install application -->
  <target name="distclean">
    <ant dir="projects/client" target="clean" inheritAll="false"/>
    <delete file="pages/client/gg-client.jar"/>
    <delete file="pages/howto/game-gardens.zip"/>
    <delete file="pages/howto/game-gardens.tar.gz"/>
    <delete dir="${deploy.dir}"/>
    <delete><fileset dir="projects/games/lib" includes="**/*.jar"/></delete>
  </target>

  <!-- rebuilds all subprojects and the top-level application -->
  <target name="distall" depends="prepare,dist,distwebapps,client"/>

  <!-- fully cleans out the installed application and all subprojects -->
  <target name="distcleanall" depends="distcleanwebapps,distclean"/>

  <!-- rebuilds everything and extra bits for packaging -->
  <target name="package" depends="distall,gamesdist,server-package,webapp-package,wiki-package"/>

  <!-- defines properties needed by the individual foo-package targets -->
  <target name="prepare-package" depends="-init-copy">
    <!-- define the directory from which we're going to build our packages -->
    <property name="pkgroot.root" value="${deploy.dir}/packages"/>
    <mkdir dir="${pkgroot.root}"/>
    <!-- TEMP: define where our .dpkg files will be written -->
    <propertycopy name="package.output" from="ooo.deprecated.package.deploy"/>
  </target>

  <!-- builds the gardens-server package -->
  <target name="server-package" depends="prepare-package">
    <!-- define the root of the package -->
    <property name="pkgroot.server" value="${pkgroot.root}/${app.name}-server"/>
    <property name="approot.server" value="${pkgroot.server}/${ooo.prefix}/${app.name}"/>
    <mkdir dir="${approot.server}"/>

    <!-- copy the external jars and native libraries needed by the server -->
    <copy todir="${approot.server}/${deploy.dir}/lib">
      <fileset dir="${deploy.dir}/lib">
        <include name="*.jar"/>
        <include name="**/*.so"/>
      </fileset>
    </copy>

    <!-- copy this project's jar files and configuration -->
    <copy todir="${approot.server}/${deploy.dir}">
      <fileset dir="${deploy.dir}">
        <include name="*.jar"/>
        <include name="*.properties"/>
        <include name="*.conf"/>
        <exclude name="build_settings.properties"/>
      </fileset>
    </copy>

    <!-- copy various scripts needed by the server -->
    <copyfilelist dest="${approot.server}/bin">
      <filelist dir="bin">
        <file name="gardens"/>
        <file name="reboot-gardens"/>
        <file name="respawn-gardens"/>
        <file name="rungardens"/>
        <file name="runjava"/>
      </filelist>
    </copyfilelist>

    <!-- create the various runtime directories needed on the server -->
    <mkdir dir="${approot.server}/run"/>
    <mkdir dir="${approot.server}/log"/>
    <mkdir dir="${approot.server}/etc/rc.d"/>
    <mkdir dir="${approot.server}/pages/games"/>

    <!-- create our server startup script -->
    <startupscript name="gardens_server" runas="${gardens.user}"
                   output="${approot.server}/etc/rc.d/${app.name}-server.sh">
      <commands>
        <start cmdline="${ooo.prefix}/${app.name}/bin/gardens start"/>
        <stop cmdline="${ooo.prefix}/${app.name}/bin/gardens stop"/>
      </commands>
    </startupscript>

    <!-- copy our security policy files -->
    <copy file="etc/gardens.policy.in" tofile="${approot.server}/etc/gardens.policy">
      <filterset>
        <filter token="PREFIX" value="${ooo.prefix}/${app.name}"/>
      </filterset>
    </copy>

    <!-- build the actual Debian package -->
    <dpkg output="${package.output}" prefix="${ooo.prefix}/${app.name}"
          distribution="${ooo.distribution}">
      <package destroot="${pkgroot.server}">
        <info>
          <name>${app.name}-server</name>
          <version>${pkgVersion}</version>
          <arch>${ooo.architecture}</arch>
          <description>Game Gardens Game Server</description>
          <maintainer>
            <name>${maintainer.name}</name>
            <email>${maintainer.email}</email>
          </maintainer>
        </info>
        <permissions>
          <permission user="${gardens.user}" group="${gardens.user}" mode="755" recursive="false">
            <path>log/</path>
            <path>run/</path>
            <path>pages/games/</path>
          </permission>
          <permission mode="555" recursive="true">
            <path>bin/</path>
            <path>etc/rc.d/${app.name}-server.sh</path>
          </permission>
          <permission user="${gardens.user}" group="${gardens.user}" mode="440">
            <path>dist/toybox.properties</path>
          </permission>
        </permissions>
      </package>
    </dpkg>
  </target>

  <!-- builds the gardens-webapp package -->
  <target name="webapp-package" depends="prepare-package">
    <!-- define the root of the package -->
    <property name="pkgroot.webapp" value="${pkgroot.root}/${app.name}-webapp"/>
    <property name="approot.webapp" value="${pkgroot.webapp}/${ooo.prefix}/${app.name}"/>
    <mkdir dir="${approot.webapp}"/>

    <!-- create the runtime directories needed by the webapp -->
    <mkdir dir="${approot.webapp}/run"/>
    <mkdir dir="${approot.webapp}/log"/>

    <!-- create webapp jetty script and copy in the war file -->
    <jettystartup webapp="${app.name}" base="${ooo.prefix}/${app.name}" runas="${gardens.user}"
                  outputdir="${approot.webapp}" port="${gardens.jetty.port}"/>
    <copy file="webapps/gardens/${deploy.dir}/gardens.war"
          todir="${approot.webapp}/webapps/gardens"/>

    <!-- copy our web pages into place -->
    <copy todir="${approot.webapp}/pages">
      <fileset dir="pages">
        <exclude name="**/*.in"/>
        <exclude name="source/**"/>
        <exclude name="**/source/**"/>
      </fileset>
    </copy>

    <!-- build the actual Debian package -->
    <dpkg output="${package.output}" prefix="${ooo.prefix}/${app.name}"
          distribution="${ooo.distribution}">
      <package destroot="${pkgroot.webapp}">
        <info>
          <name>${app.name}-webapp</name>
          <version>${pkgVersion}</version>
          <arch>${ooo.architecture}</arch>
          <description>Game Gardens Game Webapp</description>
          <maintainer>
            <name>${maintainer.name}</name>
            <email>${maintainer.email}</email>
          </maintainer>
        </info>
        <permissions>
          <permission user="${gardens.user}" group="${gardens.user}" mode="755" recursive="false">
            <path>log/</path>
            <path>run/</path>
          </permission>
          <permission mode="555">
            <path>etc/rc.d/jetty-gardens.sh</path>
          </permission>
        </permissions>
        <!-- restart webapp on package install/upgrade and stop on package removal. -->
        <scripts>
          <rcrestart script="${ooo.prefix}/${app.name}/etc/rc.d/jetty-gardens.sh"/>
        </scripts>
      </package>
    </dpkg>
  </target>

  <!-- builds the gardens-wiki package -->
  <target name="wiki-package" depends="prepare-package">
    <!-- define the root of the package -->
    <property name="pkgroot.wiki" value="${pkgroot.root}/${app.name}-wiki"/>
    <property name="approot.wiki" value="${pkgroot.wiki}/${ooo.prefix}/${app.name}"/>
    <mkdir dir="${approot.wiki}"/>

    <!-- copy the wiki skins into place -->
    <copy todir="${approot.wiki}/wiki">
      <fileset dir="wiki" includes="**"/>
    </copy>

    <!-- build the actual Debian package -->
    <dpkg output="${package.output}" prefix="${ooo.prefix}/${app.name}"
          distribution="${ooo.distribution}">
      <package destroot="${pkgroot.wiki}">
        <info>
          <name>${app.name}-wiki</name>
          <version>${pkgVersion}</version>
          <arch>${ooo.architecture}</arch>
          <description>Game Gardens Wiki Skins</description>
          <maintainer>
            <name>${maintainer.name}</name>
            <email>${maintainer.email}</email>
          </maintainer>
        </info>
      </package>
    </dpkg>
  </target>

</project>
