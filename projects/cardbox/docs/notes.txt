Game Table - Free Multiplayer Online Gaming -*- mode: outline -*-

* Summary
Provide a multiplayer networked game toolkit (written in Java) along with
well documented example games that demonstrate the functionality provided
by the toolkit. Allow would-be game developers to create their own games
and "upload" them to the site where they become playable by anyone who
happens along in the form of Java Web Start applications.

The toolkit will be structured such that the code can run in a sandbox on
both the client and server. On the server, only distributed object
manipulations will be allowed, on the client, the standard set of
functionality provided to unsigned Java Web Start applications will be
allowed.

When the library of games becomes sufficiently large, either a
subscription or micropayment system could be setup to derive revenue from
some set of "premium" games.

* Development plan
- Refactor cvs.threerings.net repository to allow anonymous public access
  to Narya
- Develop database backed "game registry" and modify basic MiCasa lobby
  system to interface with it
- Develop the server-side "sand box" in which games' server code will run,
  it will need not only to restrict functionality, but also to
  automatically use the latest .jar file each time a game is started
- Develop a web application that allows the management of games in the
  registry by their owners
  + provide description, documentation
  + upload/manage .jar files for client and server
- Wire the system up to a user database (probably OOO's UUDB)
- Port the various demos, etc. to the system

* Architecture overview
- Each game server machine runs a lobby JVM to which all clients connect
- The lobby JVM spawns a game JVM for each game implementation (say
  someone wrote a game called foo, there would be one JVM that managed all
  foo games), this allows for minimal resource use while protecting us
  from poorly implemented code that causes the JVM to go into an infinite
  loop or similar
- The lobby JVM connects to these game JVMs as a client and proxies the
  game object for the actual clients; it then also manages things like
  presence (updating the game object when clients "enter" and "leave" the
  game, when they disconnect/reconnect, etc.)

* Technical notes
- Will require some sort of XML match-making control file to configure
  game prior to match making because we don't want to run any game code on
  the lobby server

** Session flow
- User clicks on a link on the web site indicating that they'd like to
  play game X
- Web server dynamically generates JNLP file with appropriate game_id
  specified and server configuration
- User connects to specified game server and enters the game lobby
- Game begins execution in generic lobby code which requests that the user
  authenticate, then connects to the appropriate server and requests
  lobbies for the configured game type
- User enters lobby wherein they can configure games
- Using the game configuration data from the game lobby, they dowload the
  game code and/or checksum it if it's already downloaded
- Upon user's entry to lobby, game server ensures that a JVM is running
  for the game in question
- User configures game and begins play, standard gameReady code causes
  game code to be launched
- Upon completion of the game, user is returned to game lobby

** Web application
- Game category browser
- Game info page
- Game creation/edit page: edit metadata, manage/upload jar files
- Game launch applet (constructs JNLP file on the fly)

* Handling "quarantined" code
** Server side
- A separate process will be spawned off for each game that will host all
  instances of that game
- A client connection will be established from the main server to the game
  server
- The main server will make use of a small set of invocation services:
  - starting a new game and obtaining its oid
  - pinging the game server to confirm that it is alive
- The game server will load all game code from a sandboxed class loader,
  preventing unauthorized activity by game code
- If the game server fails to respond to pings from the main server, its
  process will be killed to recover from infinite looping or other
  (intentional or accidental) "DOS" attacks made by the game code

** Client side
- The client will connect to the main server and game server with
  completely separate client sessions; this allows the main server to
  avoid ever running any game code (which would be necessary if it even
  unserialized classes that were owned by a game in the process of passing
  events back and forth between the game server and client)
- The game code will be loaded from a sandboxed class loader to avoid
  unauthorized activity by the game code
- Infinite looping or other "DOS" attacks on the client are not a concern
  as the user can simply kill the process as they would any other failed
  application
- The ChatManager/ChatBox will have to do some magic to unify chat on the
  main server with chat on the game server (should we opt to host a "chat"
  object on the main server for each game instance to simplify things and
  to allow clients to continue to communicate even if a game server has
  hung?)

** Avoiding port explosion
- Each game server will be required to listen on a unique port for client
  connections which will potentially cause problems for people with
  firewalls
- Instead we can operate a routing server on port 80 which listens to
  incoming requests and routes them to one of either:
  + the web server
  + the main server
  + the appropriate game server
  based on the data at the beginning of the stream
- This server will have to copy all data back and forth between the two
  processes which will put additional strain on the server but if we host
  all web services on a separate machine it will at least be restricted to
  traffic back and forth to the main and game servers which is small
- Moreover, we can first attempt to connect directly to the server in
  question and only use the routing server if the first connection fails
  (subsequently caching the knowledge that we need to use the routing
  server to avoid annoyingly lengthy timeouts in the future)
